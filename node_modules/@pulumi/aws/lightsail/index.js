"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticIpAttachment = exports.StaticIp = exports.LbStickinessPolicy = exports.LbHttpsRedirectionPolicy = exports.LbCertificateAttachment = exports.LbCertificate = exports.LbAttachment = exports.Lb = exports.KeyPair = exports.InstancePublicPorts = exports.Instance = exports.DomainEntry = exports.Domain = exports.Disk_attachment = exports.Disk = exports.Database = exports.ContainerServiceDeploymentVersion = exports.ContainerService = exports.Certificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Certificate = null;
exports.ContainerService = null;
exports.ContainerServiceDeploymentVersion = null;
exports.Database = null;
exports.Disk = null;
exports.Disk_attachment = null;
exports.Domain = null;
exports.DomainEntry = null;
exports.Instance = null;
exports.InstancePublicPorts = null;
exports.KeyPair = null;
exports.Lb = null;
exports.LbAttachment = null;
exports.LbCertificate = null;
exports.LbCertificateAttachment = null;
exports.LbHttpsRedirectionPolicy = null;
exports.LbStickinessPolicy = null;
exports.StaticIp = null;
exports.StaticIpAttachment = null;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));
utilities.lazyLoad(exports, ["ContainerService"], () => require("./containerService"));
utilities.lazyLoad(exports, ["ContainerServiceDeploymentVersion"], () => require("./containerServiceDeploymentVersion"));
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));
utilities.lazyLoad(exports, ["Disk_attachment"], () => require("./disk_attachment"));
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));
utilities.lazyLoad(exports, ["DomainEntry"], () => require("./domainEntry"));
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
utilities.lazyLoad(exports, ["InstancePublicPorts"], () => require("./instancePublicPorts"));
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));
utilities.lazyLoad(exports, ["LbAttachment"], () => require("./lbAttachment"));
utilities.lazyLoad(exports, ["LbCertificate"], () => require("./lbCertificate"));
utilities.lazyLoad(exports, ["LbCertificateAttachment"], () => require("./lbCertificateAttachment"));
utilities.lazyLoad(exports, ["LbHttpsRedirectionPolicy"], () => require("./lbHttpsRedirectionPolicy"));
utilities.lazyLoad(exports, ["LbStickinessPolicy"], () => require("./lbStickinessPolicy"));
utilities.lazyLoad(exports, ["StaticIp"], () => require("./staticIp"));
utilities.lazyLoad(exports, ["StaticIpAttachment"], () => require("./staticIpAttachment"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:lightsail/certificate:Certificate":
                return new exports.Certificate(name, undefined, { urn });
            case "aws:lightsail/containerService:ContainerService":
                return new exports.ContainerService(name, undefined, { urn });
            case "aws:lightsail/containerServiceDeploymentVersion:ContainerServiceDeploymentVersion":
                return new exports.ContainerServiceDeploymentVersion(name, undefined, { urn });
            case "aws:lightsail/database:Database":
                return new exports.Database(name, undefined, { urn });
            case "aws:lightsail/disk:Disk":
                return new exports.Disk(name, undefined, { urn });
            case "aws:lightsail/disk_attachment:Disk_attachment":
                return new exports.Disk_attachment(name, undefined, { urn });
            case "aws:lightsail/domain:Domain":
                return new exports.Domain(name, undefined, { urn });
            case "aws:lightsail/domainEntry:DomainEntry":
                return new exports.DomainEntry(name, undefined, { urn });
            case "aws:lightsail/instance:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "aws:lightsail/instancePublicPorts:InstancePublicPorts":
                return new exports.InstancePublicPorts(name, undefined, { urn });
            case "aws:lightsail/keyPair:KeyPair":
                return new exports.KeyPair(name, undefined, { urn });
            case "aws:lightsail/lb:Lb":
                return new exports.Lb(name, undefined, { urn });
            case "aws:lightsail/lbAttachment:LbAttachment":
                return new exports.LbAttachment(name, undefined, { urn });
            case "aws:lightsail/lbCertificate:LbCertificate":
                return new exports.LbCertificate(name, undefined, { urn });
            case "aws:lightsail/lbCertificateAttachment:LbCertificateAttachment":
                return new exports.LbCertificateAttachment(name, undefined, { urn });
            case "aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy":
                return new exports.LbHttpsRedirectionPolicy(name, undefined, { urn });
            case "aws:lightsail/lbStickinessPolicy:LbStickinessPolicy":
                return new exports.LbStickinessPolicy(name, undefined, { urn });
            case "aws:lightsail/staticIp:StaticIp":
                return new exports.StaticIp(name, undefined, { urn });
            case "aws:lightsail/staticIpAttachment:StaticIpAttachment":
                return new exports.StaticIpAttachment(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "lightsail/certificate", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/containerService", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/containerServiceDeploymentVersion", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/database", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/disk", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/disk_attachment", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/domain", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/domainEntry", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/instance", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/instancePublicPorts", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/keyPair", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/lb", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/lbAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/lbCertificate", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/lbCertificateAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/lbHttpsRedirectionPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/lbStickinessPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/staticIp", _module);
pulumi.runtime.registerResourceModule("aws", "lightsail/staticIpAttachment", _module);
//# sourceMappingURL=index.js.map